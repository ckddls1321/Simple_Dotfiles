" ----------------------------------------------------------------------
" | General Settings                                                   |
" ----------------------------------------------------------------------
set nocompatible               " Don't make Vim vi-compatibile.
set autoread		"auto reload when file changed"
set autowrite		"auto relead when edit another file"
set mouse=a
set sel=exclusive
set mps+=<:>
set fileformats=unix,dos,mac
set fileencoding=utf-8
set fileencodings=utf-8
set ttyfast
set smarttab
set smartindent
set autoindent
if exists('+breakindent')
  set breakindent showbreak=\ +
endif
set gdefault
set smartcase
set ruler
set wrap linebreak nolist
set ignorecase
set colorcolumn=+1
set lbr
set showmatch
set fencs=ucs-bom,utf-8,euc-kr.latin1
set backupdir=~/.vim/backup
set foldenable
set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo
set modifiable
set exrc
set secure
set listchars=tab:>-
set relativenumber

syntax on                      " Enable syntax highlighting.

if has("autocmd")
    filetype plugin indent on
    "           │     │    └──── Enable file type detection.
    "           │     └───────── Enable loading of indent file.
    "           └─────────────── Enable loading of plugin files.
endif

set autoindent                 " Copy indent to the new line.

set backspace=indent           " ┐
set backspace+=eol             " │ Allow `backspace`
set backspace+=start           " ┘ in insert mode.

set backupskip=/tmp/*          " ┐ Don't create backups
set backupskip+=/private/tmp/* " ┘ for certain files.

set clipboard=unnamed          " ┐
                               " │ Use the system clipboard
if has("unnamedplus")          " │ as the default register.
    set clipboard+=unnamedplus " │
endif                          " ┘

set cpoptions+=$               " When making a change, don't
                               " redisplay the line, and instead,
                               " put a `$` sign at the end of
                               " the changed text.

set colorcolumn=73             " Highlight certain column(s).
set cursorline                 " Highlight the current line.
set directory=~/.vim/swaps     " Set directory for swap files.
set encoding=utf-8 nobomb      " Use UTF-8 without BOM.
set history=5000               " Increase command line history.
set hlsearch                   " Enable search highlighting.
set ignorecase                 " Ignore case in search patterns.

set incsearch                  " Highlight search pattern
                               " as it is being typed.

set laststatus=2               " Always show the status line.

set lazyredraw                 " Do not redraw the screen while
                               " executing macros, registers
                               " and other commands that have
                               " not been typed.

set listchars=tab:▸\           " ┐
set listchars+=trail:·         " │ Use custom symbols to
set listchars+=eol:↴           " │ represent invisible characters.
set listchars+=nbsp:_          " ┘

set magic                      " Enable extended regexp.
set mousehide                  " Hide mouse pointer while typing.
set noerrorbells               " Disable error bells.

set nojoinspaces               " When using the join command,
                               " only insert a single space
                               " after a `.`, `?`, or `!`.

set nostartofline              " Kept the cursor on the same column.
set report=0                   " Report the number of lines changed.
set scrolloff=5                " When scrolling, keep the cursor
                               " 5 lines below the top and 5 lines
                               " above the bottom of the screen.
set shortmess=aAItW            " Avoid all the hit-enter prompts.
set showcmd                    " Show the command being typed.
set showmode                   " Show current mode.
set spelllang=en_us            " Set the spellchecking language.
set smartcase                  " Override `ignorecase` option
                               " if the search pattern contains
                               " uppercase characters.
set synmaxcol=2500             " Limit syntax highlighting (this
                               " avoids the very slow redrawing
                               " when files contain long lines).
set tabstop=4                  " ┐
set softtabstop=4              " │ Set global <TAB> settings.
set shiftwidth=4               " │
set expandtab                  " ┘

set ttyfast                    " Enable fast terminal connection.
set undodir=~/.vim/undos       " Set directory for undo files.
set undofile                   " Automatically save undo history.
set virtualedit=all            " Allow cursor to be anywhere.

set visualbell                 " ┐
set noerrorbells               " │ Disable beeping and window flashing
set t_vb=                      " ┘ https://vim.wikia.com/wiki/Disable_beeping

set wildmenu                   " Enable enhanced command-line
                               " completion (by hitting <TAB> in
                               " command mode, Vim will show the
                               " possible matches just above the
                               " command line with the first
                               " match highlighted).

set winminheight=0             " Allow windows to be squashed.
syntax on
" typos miss handling
command! -bang E e<bang>
command! -bang Q q<bang>
command! -bang W w<bang>
command! -bang QA qa<bang>
command! -bang Qa qa<bang>
command! -bang Wa wa<bang>
command! -bang WA wa<bang>
command! -bang Wq wq<bang>
command! -bang WQ wq<bang>
nnoremap t1 1gt
nnoremap t2 2gt
nnoremap t3 3gt
nnoremap t4 4gt
nnoremap t5 5gt
nnoremap t6 6gt
nnoremap t7 7gt
nnoremap t8 8gt
nnoremap t9 9gt
nnoremap tf :tabfirst<CR>
nnoremap tn :tabnext<CR>
nnoremap tp :tabprev<CR>
nnoremap tl :tablast<CR>
nnoremap te :tabedit<CR>
nnoremap tm :tabm<CR>
nnoremap tc :tabclose
highlight Comment term=underline ctermfg=2 gui=bold guifg=SeaGreen
highlight Function term=underline ctermfg=5 guifg=Purple
highlight Type term=underline ctermfg=6 guifg=DarkCyan
highlight String term=bold
highlight Character term=bold
highlight Number term=bold
highlight Directory term=underline ctermfg=1 guifg=Magenta
" ----------------------------------------------------------------------
" | Plugins                                                            |
" ----------------------------------------------------------------------
" Use Vundle to manage the Vim plugins.
" https://github.com/VundleVim/Vundle.vim
" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
" Disable file type detection
" (this is required by Vundle).
filetype off
" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
" Include Vundle in the runtime path.
set runtimepath+=~/.vim/bundle/Vundle.vim
" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
" Initialize Vundle and specify the path
" where the plugins should be installed.
call vundle#begin("~/.vim/plugins")
    Plugin 'VundleVim/Vundle.vim'
    "=============================
	"========Programming =========
	"=============================
    Plugin 'chrisbra/unicode.vim'
    Plugin 'editorconfig/editorconfig-vim'
    Plugin 'isRuslan/vim-es6'
    Plugin 'marijnh/tern_for_vim'
	Plugin 'vheon/jedihttp'
	Plugin 'davidhalter/jedi'
	Plugin 'davidhalter/jedi-vim'
	Plugin 'tfnico/vim-gradle'
    Plugin 'mattn/webapi-vim'
    Plugin 'mhinz/vim-signify'
    Plugin 'moll/vim-node'
    Plugin 'mtscout6/syntastic-local-eslint.vim'
    Plugin 'nathanaelkane/vim-indent-guides'
	Plugin 'vim-syntastic/syntastic'
    Plugin 'tomtom/tcomment_vim'
    Plugin 'tpope/vim-commentary'
    Plugin 'tpope/vim-fugitive'
	Plugin 'airblade/vim-gitgutter'	  "Git_Diff_sign
    Plugin 'tpope/vim-repeat'
    Plugin 'tpope/vim-surround'
    Plugin 'tpope/vim-unimpaired'
	Plugin 'easymotion/vim-easymotion'    "Vim-easymotion:extend f,s search etc
	Plugin 'christoomey/vim-tmux-navigator' "Vim-Tmux Integration
	Plugin 'wakatime/vim-wakatime'
	"-------------------------------------
	"Code Display:Highlighting,Interface
	"-------------------------------------
    Plugin 'altercation/vim-colors-solarized'
	Plugin 'raimondi/delimitmate'	  "Highlight_Automatic_Closing
	Plugin 'edkolev/tmuxline.vim'         "TmuxStatus
	Plugin 'vim-airline/vim-airline'		  "Vim status line
	Plugin 'vim-airline/vim-airline-themes'
	Plugin 'flazz/vim-colorschemes'
	Plugin 'ap/vim-css-color'		  "Show CSS color on vim
	Plugin 'tmux-plugins/vim-tmux'        "tmux.conf syntax
	Plugin 'gregsexton/matchtag'	  "Show matched (),<>
	Plugin 'goldie-lin/vim-dts'		  "DTS synax
	Plugin 'kien/rainbow_parentheses.vim' "Coloring (),<>
	Plugin 'shougo/unite.vim'		  "Create_User_Interface
	Plugin 'tpope/vim-sensible'
	Plugin 'kergoth/vim-bitbake'          "Yocto Syntax Highlight
	Plugin 'hdima/python-syntax'	  "Python
	Plugin 'octol/vim-cpp-enhanced-highlight' "CPP Highlight
	Plugin 'jelera/vim-javascript-syntax' "Javascript Syntax Highlight
	Plugin 'tomasr/molokai'
	Plugin 'kshenoy/vim-signature'	  "Highlight mark of vim
	Plugin 'godlygeek/tabular'		  "Aligning Text
	Plugin 'Yggdroot/indentline'	  "Show Indent
	Plugin 'nvie/vim-flake8'		  "Python Syntax Check
	Plugin 'alisdair/vim-armasm'
	Plugin 'ekalinin/dockerfile.vim'
	"-------------------------------------
	"AutoCompletion
	"-------------------------------------
	Plugin 'valloric/youcompleteme'
	"-------------------------------------
	"File/buf/ Explorer
	"-------------------------------------
    Plugin 'kien/ctrlp.vim'
	Plugin 'shougo/vimfiler.vim'	  "@@FILE EXPLORER@@ MUST HAVE
	Plugin 'majutsushi/tagbar'        "Source Tag Explorer
	"-------------------------------------
	"Recording/History
	"-------------------------------------
   	Plugin 'dietsche/vim-lastplace'	  "Save cursor last position

call vundle#end()

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

" Re-enable file type detection
" (disabling it was required by Vundle).

runtime! plugin/sensible.vim
syntax enable
let g:molokai_original = 1
filetype plugin indent on
filetype plugin on
filetype on

" ----------------------------------------------------------------------
" | Plugins - Indent Guides                                            |
" ----------------------------------------------------------------------
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd
        \ guibg=#00323D
        \ ctermbg=Magenta
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven
        \ guibg=#073642
        \ ctermbg=DarkMagenta
" ----------------------------------------------------------------------
" | Plugins - Markdown                                                 |
" ----------------------------------------------------------------------
let g:vim_markdown_folding_disabled=1
" ----------------------------------------------------------------------
" | Plugins - Signify                                                  |
" ----------------------------------------------------------------------
" Disable Signify by default.
" https://github.com/mhinz/vim-signify
let g:signify_disable_by_default=1
" ----------------------------------------------------------------------
" | Plugins - Syntastic                                                |
" ----------------------------------------------------------------------
" Inform Syntastic which checkers to use based on file types.
" https://github.com/scrooloose/syntastic#faq
let g:syntastic_javascript_checkers = [ 'eslint' ]
" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
" Disable syntax checking by default.
let g:syntastic_mode_map = {
    \ "active_filetypes": [],
    \ "mode": "passive",
    \ "passive_filetypes": []
\}
" ----------------------------------------------------------------------
" | Helper Functions                                                   |
" ----------------------------------------------------------------------
function! GetGitBranchName()
    let branchName = ""
    if exists("g:loaded_fugitive")
        let branchName = "[" . fugitive#head() . "]"
    endif
    return branchName
endfunction

" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function! StripTrailingWhitespaces()
    " Save last search and cursor position.
    let searchHistory = @/
    let cursorLine = line(".")
    let cursorColumn = col(".")
    " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    " Strip trailing whitespaces.
    %s/\s\+$//e
    " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    " Restore previous search history and cursor position.
    let @/ = searchHistory
    call cursor(cursorLine, cursorColumn)
endfunction
" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function! ToggleLimits()
    if ( &colorcolumn == "73" )
        set colorcolumn+=51,81
    else
        set colorcolumn-=51,81
    endif
endfunction
" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function! ToggleRelativeLineNumbers()
    if ( &relativenumber == 1 )
        set number
    else
        set relativenumber
    endif
endfunction

" ----------------------------------------------------------------------
" | Automatic Commands                                                 |
" ----------------------------------------------------------------------
if has("autocmd")
    " Autocommand Groups.
    " http://learnvimscriptthehardway.stevelosh.com/chapters/14.html
    " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    " Automatically reload the configurations from
    " the `~/.vimrc` file whenever they are changed.
    augroup auto_reload_vim_configs
        autocmd!
        autocmd BufWritePost vimrc source $MYVIMRC
    augroup END
    " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    " Use relative line numbers.
    " http://jeffkreeftmeijer.com/2012/relative-line-numbers-in-vim-for-super-fast-movement/
    augroup relative_line_numbers
        autocmd!
        " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        " Automatically switch to absolute
        " line numbers when Vim loses focus.
        autocmd FocusLost * :set number
        " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        " Automatically switch to relative
        " line numbers when Vim gains focus.
        autocmd FocusGained * :set relativenumber
        " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        " Automatically switch to absolute
        " line numbers when Vim is in insert mode.
        autocmd InsertEnter * :set number
        " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        " Automatically switch to relative
        " line numbers when Vim is in normal mode.
        autocmd InsertLeave * :set relativenumber

    augroup END
    " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
    " Automatically strip the trailing
    " whitespaces when files are saved.
    augroup strip_trailing_whitespaces
        " List of file types for which the trailing whitespaces
        " should not be removed:
        let excludedFileTypes = []
        " - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
        " Only strip the trailing whitespaces if
        " the file type is not in the excluded list.
        autocmd!
        autocmd BufWritePre * if index(excludedFileTypes, &ft) < 0 | :call StripTrailingWhitespaces()
    augroup END
endif
" ----------------------------------------------------------------------
" | Color Scheme                                                       |
" ----------------------------------------------------------------------
set t_Co=256                   " Enable full-color support.
set background=dark            " Use colors that look good
if !has("gui_running")
    let g:solarized_contrast = "high"
    let g:solarized_termcolors = 256
    let g:solarized_termtrans = 1
    let g:solarized_visibility = "high"
endif
colorscheme solarized          " Use custom color scheme.
" ----------------------------------------------------------------------
" | Key Mappings                                                       |
" ----------------------------------------------------------------------
let mapleader = ","
" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
nmap <leader>* :%s/\<<C-r><C-w>\>//<Left>
" - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
map <leader>W :w !sudo tee %<CR>
" ----------------------------------------------------------------------
" | Plugin Settings
" ----------------------------------------------------------------------
let g:ycm_error_symbol = '✗'
let g:ycm_warning_symbol = '⚠'
let g:ycm_enable_diagnostic_highlighting = 1
let g:ycm_echo_current_diagnostic = 1
let g:ycm_always_populate_location_list = 1
let g:ycm_open_loclist_on_ycm_diags = 1
let g:ycm_max_diagnostics_to_display = 30
let g:ycm_show_diagnostics_ui = 1
let g:ycm_complete_in_comments = 0
let g:ycm_complete_in_strings = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 0
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_key_list_select_completion = ['<C-j>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']
let g:ycm_key_invoke_completion = '<C-Space>'
let g:ycm_key_detailed_diagnostics = '<leader>o'
let g:ycm_min_num_of_chars_for_completion = 2
let g:ycm_auto_trigger = 1
let g:ycm_confirm_extra_conf = 0
let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
let g:ycm_path_to_python_interpreter = '/usr/bin/python2'
let g:ycm_filetype_blacklist = {
			\ 'tagbar' : 1,
			\ 'qf' : 1,
			\ 'notes' : 1,
			\ 'unite' : 1,
			\ 'vimwiki' : 1,
			\ 'pandoc' : 1,
			\ 'infolog' : 1,
			\ 'mail' : 1
			\}
" ----------------------------------------------------------------------
" | Syntastic                                                 |
" ----------------------------------------------------------------------
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
let g:syntastic_enable_signs = 1
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_style_error_symbol='✗'
let g:syntastic_style_warning_symbol='⚠'
let g:syntastic_stl_format = '[%E{%e Errors}%B{, }%W{%w Warnings}]'
let g:syntastic_echo_current_error = 1
let g:syntastic_enable_balloons = 1
let g:syntastic_enable_highlighting = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_loc_list_height = 5
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_aggregate_errors = 1
let g:syntastic_sort_aggregated_errors = 0
let g:syntastic_id_checkers = 1
let g:syntastic_cpp_checkers=['cppcheck', 'cpplint']
let g:syntastic_cpp_cpplint_thres = 5
let g:syntastic_cpp_cpplint_args = '--verbose=3'
let g:syntastic_erlang_checkers = ['escript']
let g:syntastic_lua_checkers = ['luac']
let g:synastic_nasm_checkers = ['nasm']
let g:syntastic_perl_checkers = ['perl', 'podchecker', 'perlcritic']
let g:syntastic_enable_perl_checker = 1
let g:syntastic_perl_lib_path = ['./lib', './lib/auto']
let g:syntastic_perl_perlcritic_thres = 5
let g:syntastic_perl_perlcritic_post_args = '--verbose "\%s:\%f:\%l:\%c: \%p: \%m\n"'
let g:syntastic_java_checkers = ['javac', 'checkstyle']
let g:syntastic_python_checkers = ['python', 'pylint', 'pyflakes']
let g:syntastic_css_checkers = ['recess', 'prettycss']
let g:syntastic_html_checkers = ['jshint', 'w3', 'validator']
let g:syntastic_xhtml_checkers = ['tidy', 'jshint']
let g:syntastic_javascript_closurecompiler_script = '/usr/bin/closure'
let g:syntastic_javascript_checkers = ['closurecompiler']
let g:syntastic_javascript_jshint_quiet_messages = { "regex": ["Use '===' to compare with 'null'.", "Use '!==' to compare with 'null'."] }
let g:syntastic_javascript_gjslint_quiet_messages = { "regex": ['Extra space after ","', 'No docs found for member', 'Missing docs for parameter:', 'Line too long'] }
let g:syntastic_json_checkers = ['jsonlint']
let g:syntastic_xml_checkers = ['xmllint']
let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']
let g:syntastic_php_phpcs_quiet_messages = { "regex": ['Missing file\|class\|function doc comment', 'You must use \\"/\*\*\\" style comments for a function\|file comment'] }
" ----------------------------------------------------------------------
" | VIMFILER                                                  |
" ----------------------------------------------------------------------
autocmd FileType vimfiler nmap <buffer> <CR> <Plug>(vimfiler_expand_or_edit)
noremap <silent> :tree :VimFiler -split -simple -winwidth=25 -no-quit
noremap <leader>t :VimFiler -split -simple -winwidth=25 -no-quit<ENTER>
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_ignore_pattern ='\%(.ini\|.sys\|.o\|.d\|.bat\|.BAK\|.DAT\)$\|^\%(.git\)$'
" ----------------------------------------------------------------------
" | VIM EASYMOTION                                                  |
" ----------------------------------------------------------------------
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)
nmap <Leader>s <Plug>(easymotion-overwin-f2)
" " Move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)
" " Move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)
" " Gif config
map <Leader>l <Plug>(easymotion-lineforward)
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)
map <Leader>h <Plug>(easymotion-linebackward)
" " Gif config
map / /\v
map  <Leader>/ <Plug>(easymotion-sn)
omap <Leader>/ <Plug>(easymotion-tn)
map  <C-n> <Plug>(easymotion-next)
map  <S-m> <Plug>(easymotion-prev)
let g:EasyMotion_startofline = 0 " keep cursor column when JK motion
let g:EasyMotion_smartcase = 1
" ----------------------------------------------------------------------
" | CTRLP                                                   |
" ----------------------------------------------------------------------
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
			\ 'dir':  '\v[\/]\.(git|hg|svn)$',
			\ 'file': '\v\.(exe|so|dll)$',
			\ 'link': 'some_bad_symbolic_links',
			\ }
let g:ctrlp_extensions = ['tag', 'buffertag','mixed']
"-----------IGNORE settings--------"
set wildmode=list:longest,full
set wildmenu "turn on wild menu
set wildignore=*.o,*.obj "stuff to ignore when tab completing
set wildignore+=*DS_Store*
set wildignore+=*sass-cache*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif
set wildignore+=*.so,*.swp,*.zip,*/.Trash/**,*.pdf,*.dmg,*/Library/**,*/.rbenv/**
set wildignore+=*/.nx/**,*.app
set wildignore+=*/build/**
